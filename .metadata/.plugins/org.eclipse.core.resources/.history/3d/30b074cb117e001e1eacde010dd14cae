import java.awt.EventQueue;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Vector;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.border.EmptyBorder;

public class ArcadeServer extends JFrame{
	private static final long serialVersionUID = 1L;
	private JPanel contentPane;
	JTextArea textArea;
	private JTextField txtPortNumber;

	private ServerSocket socket; // 서버소켓
	private Socket client_socket; // accept() 에서 생성된 client 소켓
	private Vector UserVec = new Vector(); // 연결된 사용자를 저장할 벡터
	
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					ArcadeServer frame = new ArcadeServer();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
	public ArcadeServer() { //생성자
			ArcadeServer server = this;
			
			setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
			setBounds(100, 100, 338, 440);
			
			contentPane = new JPanel();
			contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
			setContentPane(contentPane);
			contentPane.setLayout(null);
			
			JScrollPane scrollPane = new JScrollPane();
			scrollPane.setBounds(12, 10, 300, 298);
			contentPane.add(scrollPane);
			
			textArea = new JTextArea();
			scrollPane.setViewportView(textArea);
			
			JLabel lblNewLabel = new JLabel("Port Number");
			lblNewLabel.setBounds(13, 318, 87, 26);
			contentPane.add(lblNewLabel);
			
			txtPortNumber = new JTextField();
			txtPortNumber.setHorizontalAlignment(SwingConstants.CENTER);
			txtPortNumber.setText("30000");
			txtPortNumber.setBounds(112, 318, 199, 26);
			contentPane.add(txtPortNumber);
			txtPortNumber.setColumns(10);
			
			JButton btnServerStart = new JButton("Server Start");
			
			btnServerStart.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					try {
						socket = new ServerSocket(Integer.parseInt(txtPortNumber.getText()));
					} catch (NumberFormatException | IOException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}
					AppendText("Chat Server Running..");
					btnServerStart.setText("Chat Server Running..");
					btnServerStart.setEnabled(false); // 서버를 더이상 실행시키지 못 하게 막는다
					txtPortNumber.setEnabled(false); // 더이상 포트번호 수정못 하게 막는다
					AcceptServer accept_server = new AcceptServer();
					accept_server.start();
				}
			});
			btnServerStart.setBounds(12, 356, 300, 35);
			contentPane.add(btnServerStart);
	}
	
	void AppendText(String s) {
		textArea.append(s + "\n");
		textArea.setCaretPosition(textArea.getText().length());
	}
	
	class AcceptServer extends Thread{

		@Override
		public void run() {
			while (true) { // 사용자 접속을 계속해서 받기 위해 while문
				try {
					AppendText("Waiting new clients ...");
					client_socket = socket.accept(); // accept가 일어나기 전까지는 무한 대기중
					AppendText("새로운 참가자 from " + client_socket);
					
					// User 당 하나씩 Thread 생성
					UserService new_user = new UserService(client_socket);
					
					UserVec.add(new_user); // 새로운 참가자 배열에 추가
					new_user.start(); // 만든 객체의 스레드 실행
					AppendText("현재 참가자 수 " + UserVec.size());
				} catch (IOException e) {
					AppendText("accept() error");
					// System.exit(0);
				}
			}
		}
		
		class UserService extends Thread {//UserService--------------------------------
			private InputStream is;
			private OutputStream os;
			private DataInputStream dis;
			private DataOutputStream dos;

			private ObjectInputStream ois;
			private ObjectOutputStream oos;

			private Socket client_socket;
			private Vector user_vc;
			public String UserName = "";
			public String UserStatus;

			public UserService(Socket client_socket) { //생성자
				// TODO Auto-generated constructor stub
				// 매개변수로 넘어온 자료 저장
				this.client_socket = client_socket;
				this.user_vc = UserVec;
				try {

					oos = new ObjectOutputStream(client_socket.getOutputStream());
					oos.flush();
					ois = new ObjectInputStream(client_socket.getInputStream());

				} catch (Exception e) {
					AppendText("userService error");
				}
			}
		}
	}
}
